name: dantive-regbot
version: "3.9"

services:
  db:
    image: postgres:16
    restart: unless-stopped
    env_file: .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    working_dir: /workspace
    volumes:
      - ..:/workspace
      - /workspace/postgres:/var/lib/postgresql/data
    ports:
      - "${PG_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 30

  qdrant:
    image: qdrant/qdrant:latest
    restart: unless-stopped
    environment:
      - QDRANT__STORAGE__STORAGE_PATH=/qdrant/storage
    working_dir: /workspace
    volumes:
      - ..:/workspace
      - /workspace/qdrant:/qdrant/storage
    ports:
      - "${QDRANT_PORT:-6333}:6333"
    healthcheck:
      test: ["CMD-SHELL", "curl -sf http://127.0.0.1:6333/collections > /dev/null"]
      interval: 10s
      timeout: 5s
      retries: 30

  ollama:
    image: ollama/ollama:latest
    restart: unless-stopped
    environment:
      - OLLAMA_MODELS=/root/.ollama
    working_dir: /workspace
    volumes:
      - ..:/workspace
      - /workspace/ollama:/root/.ollama
    ports:
      - "${OLLAMA_PORT:-11434}:11434"
    healthcheck:
      test: ["CMD-SHELL", "curl -sf http://127.0.0.1:11434/api/tags > /dev/null"]
      interval: 10s
      timeout: 5s
      retries: 30

  # one-shot: pre-pull models if missing (idempotent)
  pull_models:
    image: ollama/ollama:latest
    depends_on:
      ollama:
        condition: service_healthy
    environment:
      - OLLAMA_HOST=ollama:11434
    working_dir: /workspace
    volumes:
      - ..:/workspace
      - /workspace/ollama:/root/.ollama
      - ../ops/entrypoint.pull-models.sh:/entrypoint.sh:ro
      - ../ops/model-list.txt:/models.txt:ro
      - /workspace/markers:/markers
    entrypoint: ["/bin/bash","/entrypoint.sh"]
    restart: "no"

  # one-shot: ingest/seed RAG (idempotent)
  ingest:
    build: ../services/ingest
    depends_on:
      qdrant:
        condition: service_healthy
      ollama:
        condition: service_healthy
    environment:
      - QDRANT_URL=http://qdrant:6333
      - EMBED_MODEL=${EMBED_MODEL:-nomic-embed-text:latest}
      - COLLECTION_NAME=${COLLECTION_NAME:-regdocs_v1}
      - DATASET_DIR=/datasets/regdocs
    working_dir: /workspace
    volumes:
      - ..:/workspace
      - /workspace/datasets:/datasets
      - /workspace/markers:/markers
      - ../ops/entrypoint.ingest.sh:/entrypoint.sh:ro
    entrypoint: ["/bin/bash","/entrypoint.sh"]
    restart: "no"

  api:
    build: ../services/api
    restart: unless-stopped
    environment:
      - QDRANT_URL=http://qdrant:6333
      - OLLAMA_URL=http://ollama:11434
      - API_PUBLIC_BASE=${API_PUBLIC_BASE:-http://127.0.0.1:8000}
    working_dir: /workspace/apps/api
    volumes:
      - ..:/workspace
    ports:
      - "${API_PORT:-8000}:8000"
    command: >
      uvicorn main:app --host 0.0.0.0 --port 8000
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://127.0.0.1:8000/health || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 30

  ui:
    build: ../services/ui
    restart: unless-stopped
    environment:
      - API_URL=${API_PUBLIC_BASE:-http://127.0.0.1:8000}
    working_dir: /workspace/apps/ui
    volumes:
      - ..:/workspace
    ports:
      - "${UI_PORT:-8501}:8501"
    command: >
      streamlit run streamlit_app.py --server.port 8501 --server.address 0.0.0.0
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://127.0.0.1:8501/_stcore/health || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 30
