name: dantive-regbot

services:
  db:
    image: postgres:16
    restart: unless-stopped
    env_file: .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 30

  qdrant:
    image: qdrant/qdrant:v1.12.3
    restart: unless-stopped
    ports:
      - "${QDRANT_PORT}:6333"
    volumes:
      - qdrant_storage:/qdrant/storage
      # healthcheck:  # <-- comment this whole block for now
      #   test: ["CMD", "/qdrant/healthcheck"]
      #   interval: 5s
      #   timeout: 5s
      #   retries: 30

  ollama:
    image: ollama/ollama:0.3.12
    restart: unless-stopped
    environment:
      OLLAMA_KEEP_ALIVE: "24h"
      # No proxy here; the server only listens and serves locally
      # OLLAMA_HOST default is fine; healthcheck uses localhost
    ports:
      - "${OLLAMA_PORT}:11434"
    volumes:
      - models_cache:/root/.ollama
    healthcheck:
      test: ["CMD", "ollama", "list"]
      interval: 10s
      timeout: 5s
      retries: 30

  # One-shot model pull into the ollama volume (safe to re-run)
  ollama-init:
    image: ollama/ollama:0.3.12
    depends_on:
      ollama:
        condition: service_healthy
    environment:
      OLLAMA_HOST: http://ollama:11434
      # Use the real Docker Desktop magic hostname:
      HTTP_PROXY:  http://host.docker.internal:3128
      HTTPS_PROXY: http://host.docker.internal:3128
      # Bypass proxy for in-cluster/localhost targets
      NO_PROXY: "localhost,127.0.0.1,api,db,qdrant,ollama,0.0.0.0"
    volumes:
      - models_cache:/root/.ollama
    entrypoint: ["/bin/sh","-lc"]
    command: >
      "ollama pull mistral:7b-instruct || true &&
      ollama pull nomic-embed-text || true"

  api:
    build:
      context: ..
      dockerfile: apps/api/Dockerfile
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      qdrant:
        condition: service_started   # <-- was service_healthy
      # remove ollama dep for now
    env_file: .env
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      QDRANT_URL: http://qdrant:6333
      OLLAMA_URL: http://ollama:11434
      OLLAMA_DEFAULT_MODEL: mistral:7b-instruct
      OLLAMA_CONNECT_TIMEOUT: "10"
      OLLAMA_READ_TIMEOUT: "600"
    working_dir: /workspace/apps/api
    volumes:
      - ..:/workspace
    ports:
      - "${API_PORT:-8000}:8000"
    command: >
      uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://127.0.0.1:8000/health || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 30

  ui:
    build:
      context: ../apps/ui  
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      api:
        condition: service_healthy
    env_file: .env
    environment:
      API_URL: http://api:8000
    working_dir: /workspace/apps/ui
    volumes:
      - ..:/workspace
    ports:
      - "${UI_PORT:-8501}:8501"
    command: >
      streamlit run streamlit_app.py --server.port 8501 --server.address 0.0.0.0
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://127.0.0.1:8501/_stcore/health || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 30

volumes:
  pgdata:
  qdrant_storage:
  models_cache: