name: dantive-regbot

services:
  db:
    image: postgres:16
    restart: unless-stopped
    env_file: .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      # Persist Postgres on the Runpod Network Volume
      - /workspace/postgres:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 30

  qdrant:
    image: qdrant/qdrant:v1.12.3
    restart: unless-stopped
    ports:
      - "${QDRANT_PORT}:6333"
    volumes:
      # Persist Qdrant storage on the Network Volume
      - /workspace/qdrant:/qdrant/storage
    # Keeping simple start dependency (Qdrant boots fast)
    # healthcheck:
    #   test: ["CMD", "/qdrant/healthcheck"]
    #   interval: 5s
    #   timeout: 5s
    #   retries: 30

  ollama:
    image: ollama/ollama:0.3.12
    restart: unless-stopped
    # === GPU on Runpod ===
    runtime: nvidia
    environment:
      NVIDIA_VISIBLE_DEVICES: all
      NVIDIA_DRIVER_CAPABILITIES: compute,utility
      OLLAMA_KEEP_ALIVE: "30m"
    ports:
      - "${OLLAMA_PORT}:11434"
    volumes:
      # Persist models on the Network Volume (fast next boots)
      - /workspace/ollama:/root/.ollama
    healthcheck:
      test: ["CMD", "ollama", "list"]
      interval: 10s
      timeout: 5s
      retries: 30

  # One-shot model pull into the ollama volume (safe to re-run)
  ollama-init:
    image: ollama/ollama:0.3.12
    depends_on:
      ollama:
        condition: service_healthy
    env_file: .env                 # <-- read OLLAMA_MODELS from .env
    environment:
      OLLAMA_HOST: http://ollama:11434
    volumes:
      - /workspace/ollama:/root/.ollama
    entrypoint: ["/bin/sh","-lc"]
    command: |
      models="${OLLAMA_MODELS:-mistral:7b-instruct,nomic-embed-text}";
      IFS=,;
      for m in $models; do
        echo "Pulling $m";
        ollama pull "$m" || true;
      done

  api:
    build:
      context: ..
      dockerfile: apps/api/Dockerfile
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      qdrant:
        condition: service_started
      # no hard dep on ollama (API can lazy-connect)
    env_file: .env
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      QDRANT_URL: http://qdrant:6333
      OLLAMA_URL: http://ollama:11434
      OLLAMA_DEFAULT_MODEL: mistral:7b-instruct
      OLLAMA_CONNECT_TIMEOUT: "10"
      OLLAMA_READ_TIMEOUT: "600"
      QDRANT_COLLECTION: ${QDRANT_COLLECTION:-regdocs_v1}
    working_dir: /workspace/apps/api
    volumes:
      - ..:/workspace
    ports:
      - "${API_PORT:-8000}:8000"
    command: >
      uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://127.0.0.1:8000/health || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 30

  ui:
    build:
      context: ../apps/ui
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      api:
        condition: service_healthy
    env_file: .env
    environment:
      API_URL: http://api:8000
    working_dir: /workspace/apps/ui
    volumes:
      - ..:/workspace
    ports:
      - "${UI_PORT:-8501}:8501"
    command: >
      streamlit run streamlit_app.py --server.port 8501 --server.address 0.0.0.0
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://127.0.0.1:8501/_stcore/health || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 30